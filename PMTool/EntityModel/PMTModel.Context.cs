//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PMTool.EntityModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PMTEntities2 : DbContext
    {
        public PMTEntities2()
            : base("name=PMTEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<Attachment> Attachments { get; set; }
        public virtual DbSet<Employee365> Employee365 { get; set; }
        public virtual DbSet<MileStone> MileStones { get; set; }
        public virtual DbSet<MilestoneAssignedTo> MilestoneAssignedToes { get; set; }
        public virtual DbSet<Priority> Priorities { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectMember> ProjectMembers { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
    
        public virtual int SP_AddProject(string projectName, string description, string uploadAttachement, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> fK_ProjectOwner, string status, Nullable<decimal> budget, Nullable<decimal> progress, string priority, Nullable<System.DateTime> completedOn, Nullable<System.DateTime> pCreatedOn, Nullable<int> pCreatedBy, Nullable<System.DateTime> pModifiedOn, Nullable<int> pModifiedBy, Nullable<bool> pIsActive, ObjectParameter exceptionMessage, ObjectParameter validateMessage, ObjectParameter proId)
        {
            var projectNameParameter = projectName != null ?
                new ObjectParameter("projectName", projectName) :
                new ObjectParameter("projectName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var uploadAttachementParameter = uploadAttachement != null ?
                new ObjectParameter("UploadAttachement", uploadAttachement) :
                new ObjectParameter("UploadAttachement", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var fK_ProjectOwnerParameter = fK_ProjectOwner.HasValue ?
                new ObjectParameter("FK_ProjectOwner", fK_ProjectOwner) :
                new ObjectParameter("FK_ProjectOwner", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var budgetParameter = budget.HasValue ?
                new ObjectParameter("Budget", budget) :
                new ObjectParameter("Budget", typeof(decimal));
    
            var progressParameter = progress.HasValue ?
                new ObjectParameter("Progress", progress) :
                new ObjectParameter("Progress", typeof(decimal));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var completedOnParameter = completedOn.HasValue ?
                new ObjectParameter("CompletedOn", completedOn) :
                new ObjectParameter("CompletedOn", typeof(System.DateTime));
    
            var pCreatedOnParameter = pCreatedOn.HasValue ?
                new ObjectParameter("PCreatedOn", pCreatedOn) :
                new ObjectParameter("PCreatedOn", typeof(System.DateTime));
    
            var pCreatedByParameter = pCreatedBy.HasValue ?
                new ObjectParameter("PCreatedBy", pCreatedBy) :
                new ObjectParameter("PCreatedBy", typeof(int));
    
            var pModifiedOnParameter = pModifiedOn.HasValue ?
                new ObjectParameter("PModifiedOn", pModifiedOn) :
                new ObjectParameter("PModifiedOn", typeof(System.DateTime));
    
            var pModifiedByParameter = pModifiedBy.HasValue ?
                new ObjectParameter("PModifiedBy", pModifiedBy) :
                new ObjectParameter("PModifiedBy", typeof(int));
    
            var pIsActiveParameter = pIsActive.HasValue ?
                new ObjectParameter("PIsActive", pIsActive) :
                new ObjectParameter("PIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddProject", projectNameParameter, descriptionParameter, uploadAttachementParameter, startDateParameter, endDateParameter, fK_ProjectOwnerParameter, statusParameter, budgetParameter, progressParameter, priorityParameter, completedOnParameter, pCreatedOnParameter, pCreatedByParameter, pModifiedOnParameter, pModifiedByParameter, pIsActiveParameter, exceptionMessage, validateMessage, proId);
        }
    
        public virtual int SP_EditProject(Nullable<int> projectId, string projectName, string description, string uploadAttachement, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> fK_ProjectOwner, string status, Nullable<decimal> budget, Nullable<decimal> progress, string priority, Nullable<System.DateTime> completedOn, Nullable<System.DateTime> pCreatedOn, Nullable<int> pCreatedBy, Nullable<System.DateTime> pModifiedOn, Nullable<int> pModifiedBy, Nullable<bool> pIsActive, ObjectParameter exceptionMessage, ObjectParameter validateMessage)
        {
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("projectId", projectId) :
                new ObjectParameter("projectId", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("projectName", projectName) :
                new ObjectParameter("projectName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var uploadAttachementParameter = uploadAttachement != null ?
                new ObjectParameter("UploadAttachement", uploadAttachement) :
                new ObjectParameter("UploadAttachement", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var fK_ProjectOwnerParameter = fK_ProjectOwner.HasValue ?
                new ObjectParameter("FK_ProjectOwner", fK_ProjectOwner) :
                new ObjectParameter("FK_ProjectOwner", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var budgetParameter = budget.HasValue ?
                new ObjectParameter("Budget", budget) :
                new ObjectParameter("Budget", typeof(decimal));
    
            var progressParameter = progress.HasValue ?
                new ObjectParameter("Progress", progress) :
                new ObjectParameter("Progress", typeof(decimal));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var completedOnParameter = completedOn.HasValue ?
                new ObjectParameter("CompletedOn", completedOn) :
                new ObjectParameter("CompletedOn", typeof(System.DateTime));
    
            var pCreatedOnParameter = pCreatedOn.HasValue ?
                new ObjectParameter("PCreatedOn", pCreatedOn) :
                new ObjectParameter("PCreatedOn", typeof(System.DateTime));
    
            var pCreatedByParameter = pCreatedBy.HasValue ?
                new ObjectParameter("PCreatedBy", pCreatedBy) :
                new ObjectParameter("PCreatedBy", typeof(int));
    
            var pModifiedOnParameter = pModifiedOn.HasValue ?
                new ObjectParameter("PModifiedOn", pModifiedOn) :
                new ObjectParameter("PModifiedOn", typeof(System.DateTime));
    
            var pModifiedByParameter = pModifiedBy.HasValue ?
                new ObjectParameter("PModifiedBy", pModifiedBy) :
                new ObjectParameter("PModifiedBy", typeof(int));
    
            var pIsActiveParameter = pIsActive.HasValue ?
                new ObjectParameter("PIsActive", pIsActive) :
                new ObjectParameter("PIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EditProject", projectIdParameter, projectNameParameter, descriptionParameter, uploadAttachementParameter, startDateParameter, endDateParameter, fK_ProjectOwnerParameter, statusParameter, budgetParameter, progressParameter, priorityParameter, completedOnParameter, pCreatedOnParameter, pCreatedByParameter, pModifiedOnParameter, pModifiedByParameter, pIsActiveParameter, exceptionMessage, validateMessage);
        }
    
        public virtual int SP_AddActivity(string activityName, string description, string uploadAttachement, Nullable<decimal> longitude, Nullable<decimal> latitude, Nullable<int> fK_Task, Nullable<int> fK_Project, Nullable<int> fK_Milestone, Nullable<int> fK_MilestoneOwner, Nullable<int> fK_ProjectOwner, Nullable<int> fK_CuurentlyAssignTo, Nullable<System.DateTime> completedOn, Nullable<System.DateTime> aCreatedOn, Nullable<int> aCreatedBy, Nullable<System.DateTime> aModifiedOn, Nullable<int> aModifiedBy, Nullable<bool> aIsActive, ObjectParameter exceptionMessage, ObjectParameter validateMessage)
        {
            var activityNameParameter = activityName != null ?
                new ObjectParameter("ActivityName", activityName) :
                new ObjectParameter("ActivityName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var uploadAttachementParameter = uploadAttachement != null ?
                new ObjectParameter("UploadAttachement", uploadAttachement) :
                new ObjectParameter("UploadAttachement", typeof(string));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var fK_TaskParameter = fK_Task.HasValue ?
                new ObjectParameter("FK_Task", fK_Task) :
                new ObjectParameter("FK_Task", typeof(int));
    
            var fK_ProjectParameter = fK_Project.HasValue ?
                new ObjectParameter("FK_Project", fK_Project) :
                new ObjectParameter("FK_Project", typeof(int));
    
            var fK_MilestoneParameter = fK_Milestone.HasValue ?
                new ObjectParameter("FK_Milestone", fK_Milestone) :
                new ObjectParameter("FK_Milestone", typeof(int));
    
            var fK_MilestoneOwnerParameter = fK_MilestoneOwner.HasValue ?
                new ObjectParameter("FK_MilestoneOwner", fK_MilestoneOwner) :
                new ObjectParameter("FK_MilestoneOwner", typeof(int));
    
            var fK_ProjectOwnerParameter = fK_ProjectOwner.HasValue ?
                new ObjectParameter("FK_ProjectOwner", fK_ProjectOwner) :
                new ObjectParameter("FK_ProjectOwner", typeof(int));
    
            var fK_CuurentlyAssignToParameter = fK_CuurentlyAssignTo.HasValue ?
                new ObjectParameter("FK_CuurentlyAssignTo", fK_CuurentlyAssignTo) :
                new ObjectParameter("FK_CuurentlyAssignTo", typeof(int));
    
            var completedOnParameter = completedOn.HasValue ?
                new ObjectParameter("CompletedOn", completedOn) :
                new ObjectParameter("CompletedOn", typeof(System.DateTime));
    
            var aCreatedOnParameter = aCreatedOn.HasValue ?
                new ObjectParameter("ACreatedOn", aCreatedOn) :
                new ObjectParameter("ACreatedOn", typeof(System.DateTime));
    
            var aCreatedByParameter = aCreatedBy.HasValue ?
                new ObjectParameter("ACreatedBy", aCreatedBy) :
                new ObjectParameter("ACreatedBy", typeof(int));
    
            var aModifiedOnParameter = aModifiedOn.HasValue ?
                new ObjectParameter("AModifiedOn", aModifiedOn) :
                new ObjectParameter("AModifiedOn", typeof(System.DateTime));
    
            var aModifiedByParameter = aModifiedBy.HasValue ?
                new ObjectParameter("AModifiedBy", aModifiedBy) :
                new ObjectParameter("AModifiedBy", typeof(int));
    
            var aIsActiveParameter = aIsActive.HasValue ?
                new ObjectParameter("AIsActive", aIsActive) :
                new ObjectParameter("AIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddActivity", activityNameParameter, descriptionParameter, uploadAttachementParameter, longitudeParameter, latitudeParameter, fK_TaskParameter, fK_ProjectParameter, fK_MilestoneParameter, fK_MilestoneOwnerParameter, fK_ProjectOwnerParameter, fK_CuurentlyAssignToParameter, completedOnParameter, aCreatedOnParameter, aCreatedByParameter, aModifiedOnParameter, aModifiedByParameter, aIsActiveParameter, exceptionMessage, validateMessage);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_AddMilestone(Nullable<int> fK_Project, string milestoneName, string description, string uploadAttachement, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string status, Nullable<decimal> budget, Nullable<decimal> progress, string priority, Nullable<int> fK_DependentOn, Nullable<bool> isDependent, Nullable<int> fK_ProjectOwner, Nullable<int> fK_CuurentlyAssignTo, Nullable<System.DateTime> completedOn, Nullable<System.DateTime> mCreatedOn, Nullable<int> mCreatedBy, Nullable<System.DateTime> mModifiedOn, Nullable<int> mModifiedBy, Nullable<bool> mIsActive, ObjectParameter exceptionMessage, ObjectParameter validateMessage)
        {
            var fK_ProjectParameter = fK_Project.HasValue ?
                new ObjectParameter("FK_Project", fK_Project) :
                new ObjectParameter("FK_Project", typeof(int));
    
            var milestoneNameParameter = milestoneName != null ?
                new ObjectParameter("MilestoneName", milestoneName) :
                new ObjectParameter("MilestoneName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var uploadAttachementParameter = uploadAttachement != null ?
                new ObjectParameter("UploadAttachement", uploadAttachement) :
                new ObjectParameter("UploadAttachement", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var budgetParameter = budget.HasValue ?
                new ObjectParameter("Budget", budget) :
                new ObjectParameter("Budget", typeof(decimal));
    
            var progressParameter = progress.HasValue ?
                new ObjectParameter("Progress", progress) :
                new ObjectParameter("Progress", typeof(decimal));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var fK_DependentOnParameter = fK_DependentOn.HasValue ?
                new ObjectParameter("FK_DependentOn", fK_DependentOn) :
                new ObjectParameter("FK_DependentOn", typeof(int));
    
            var isDependentParameter = isDependent.HasValue ?
                new ObjectParameter("IsDependent", isDependent) :
                new ObjectParameter("IsDependent", typeof(bool));
    
            var fK_ProjectOwnerParameter = fK_ProjectOwner.HasValue ?
                new ObjectParameter("FK_ProjectOwner", fK_ProjectOwner) :
                new ObjectParameter("FK_ProjectOwner", typeof(int));
    
            var fK_CuurentlyAssignToParameter = fK_CuurentlyAssignTo.HasValue ?
                new ObjectParameter("FK_CuurentlyAssignTo", fK_CuurentlyAssignTo) :
                new ObjectParameter("FK_CuurentlyAssignTo", typeof(int));
    
            var completedOnParameter = completedOn.HasValue ?
                new ObjectParameter("CompletedOn", completedOn) :
                new ObjectParameter("CompletedOn", typeof(System.DateTime));
    
            var mCreatedOnParameter = mCreatedOn.HasValue ?
                new ObjectParameter("MCreatedOn", mCreatedOn) :
                new ObjectParameter("MCreatedOn", typeof(System.DateTime));
    
            var mCreatedByParameter = mCreatedBy.HasValue ?
                new ObjectParameter("MCreatedBy", mCreatedBy) :
                new ObjectParameter("MCreatedBy", typeof(int));
    
            var mModifiedOnParameter = mModifiedOn.HasValue ?
                new ObjectParameter("MModifiedOn", mModifiedOn) :
                new ObjectParameter("MModifiedOn", typeof(System.DateTime));
    
            var mModifiedByParameter = mModifiedBy.HasValue ?
                new ObjectParameter("MModifiedBy", mModifiedBy) :
                new ObjectParameter("MModifiedBy", typeof(int));
    
            var mIsActiveParameter = mIsActive.HasValue ?
                new ObjectParameter("MIsActive", mIsActive) :
                new ObjectParameter("MIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_AddMilestone", fK_ProjectParameter, milestoneNameParameter, descriptionParameter, uploadAttachementParameter, startDateParameter, endDateParameter, statusParameter, budgetParameter, progressParameter, priorityParameter, fK_DependentOnParameter, isDependentParameter, fK_ProjectOwnerParameter, fK_CuurentlyAssignToParameter, completedOnParameter, mCreatedOnParameter, mCreatedByParameter, mModifiedOnParameter, mModifiedByParameter, mIsActiveParameter, exceptionMessage, validateMessage);
        }
    
        public virtual int SP_AddTask(Nullable<int> fK_Project, Nullable<int> fK_Milestone, string taskName, string description, string uploadAttachement, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string status, Nullable<decimal> budget, Nullable<decimal> progress, string priority, Nullable<decimal> longitude, Nullable<decimal> latitude, Nullable<decimal> radius, Nullable<int> fK_DependentOn, Nullable<bool> isDependent, Nullable<int> fK_ProjectOwner, Nullable<int> fK_CuurentlyAssignTo, Nullable<System.DateTime> completedOn, Nullable<System.DateTime> tCreatedOn, Nullable<int> tCreatedBy, Nullable<System.DateTime> tModifiedOn, Nullable<int> tModifiedBy, Nullable<bool> tIsActive, ObjectParameter exceptionMessage, ObjectParameter validateMessage)
        {
            var fK_ProjectParameter = fK_Project.HasValue ?
                new ObjectParameter("FK_Project", fK_Project) :
                new ObjectParameter("FK_Project", typeof(int));
    
            var fK_MilestoneParameter = fK_Milestone.HasValue ?
                new ObjectParameter("FK_Milestone", fK_Milestone) :
                new ObjectParameter("FK_Milestone", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var uploadAttachementParameter = uploadAttachement != null ?
                new ObjectParameter("UploadAttachement", uploadAttachement) :
                new ObjectParameter("UploadAttachement", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var budgetParameter = budget.HasValue ?
                new ObjectParameter("Budget", budget) :
                new ObjectParameter("Budget", typeof(decimal));
    
            var progressParameter = progress.HasValue ?
                new ObjectParameter("Progress", progress) :
                new ObjectParameter("Progress", typeof(decimal));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var radiusParameter = radius.HasValue ?
                new ObjectParameter("Radius", radius) :
                new ObjectParameter("Radius", typeof(decimal));
    
            var fK_DependentOnParameter = fK_DependentOn.HasValue ?
                new ObjectParameter("FK_DependentOn", fK_DependentOn) :
                new ObjectParameter("FK_DependentOn", typeof(int));
    
            var isDependentParameter = isDependent.HasValue ?
                new ObjectParameter("IsDependent", isDependent) :
                new ObjectParameter("IsDependent", typeof(bool));
    
            var fK_ProjectOwnerParameter = fK_ProjectOwner.HasValue ?
                new ObjectParameter("FK_ProjectOwner", fK_ProjectOwner) :
                new ObjectParameter("FK_ProjectOwner", typeof(int));
    
            var fK_CuurentlyAssignToParameter = fK_CuurentlyAssignTo.HasValue ?
                new ObjectParameter("FK_CuurentlyAssignTo", fK_CuurentlyAssignTo) :
                new ObjectParameter("FK_CuurentlyAssignTo", typeof(int));
    
            var completedOnParameter = completedOn.HasValue ?
                new ObjectParameter("CompletedOn", completedOn) :
                new ObjectParameter("CompletedOn", typeof(System.DateTime));
    
            var tCreatedOnParameter = tCreatedOn.HasValue ?
                new ObjectParameter("TCreatedOn", tCreatedOn) :
                new ObjectParameter("TCreatedOn", typeof(System.DateTime));
    
            var tCreatedByParameter = tCreatedBy.HasValue ?
                new ObjectParameter("TCreatedBy", tCreatedBy) :
                new ObjectParameter("TCreatedBy", typeof(int));
    
            var tModifiedOnParameter = tModifiedOn.HasValue ?
                new ObjectParameter("TModifiedOn", tModifiedOn) :
                new ObjectParameter("TModifiedOn", typeof(System.DateTime));
    
            var tModifiedByParameter = tModifiedBy.HasValue ?
                new ObjectParameter("TModifiedBy", tModifiedBy) :
                new ObjectParameter("TModifiedBy", typeof(int));
    
            var tIsActiveParameter = tIsActive.HasValue ?
                new ObjectParameter("TIsActive", tIsActive) :
                new ObjectParameter("TIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddTask", fK_ProjectParameter, fK_MilestoneParameter, taskNameParameter, descriptionParameter, uploadAttachementParameter, startDateParameter, endDateParameter, statusParameter, budgetParameter, progressParameter, priorityParameter, longitudeParameter, latitudeParameter, radiusParameter, fK_DependentOnParameter, isDependentParameter, fK_ProjectOwnerParameter, fK_CuurentlyAssignToParameter, completedOnParameter, tCreatedOnParameter, tCreatedByParameter, tModifiedOnParameter, tModifiedByParameter, tIsActiveParameter, exceptionMessage, validateMessage);
        }
    
        public virtual int SP_EditActivity(Nullable<int> id, string activityName, string description, string uploadAttachement, Nullable<decimal> longitude, Nullable<decimal> latitude, Nullable<int> fK_Task, Nullable<int> fK_Project, Nullable<int> fK_Milestone, Nullable<int> fK_MilestoneOwner, Nullable<int> fK_ProjectOwner, Nullable<int> fK_CuurentlyAssignTo, Nullable<System.DateTime> completedOn, Nullable<System.DateTime> aCreatedOn, Nullable<int> aCreatedBy, Nullable<System.DateTime> aModifiedOn, Nullable<int> aModifiedBy, Nullable<bool> aIsActive, ObjectParameter exceptionMessage, ObjectParameter validateMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var activityNameParameter = activityName != null ?
                new ObjectParameter("ActivityName", activityName) :
                new ObjectParameter("ActivityName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var uploadAttachementParameter = uploadAttachement != null ?
                new ObjectParameter("UploadAttachement", uploadAttachement) :
                new ObjectParameter("UploadAttachement", typeof(string));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var fK_TaskParameter = fK_Task.HasValue ?
                new ObjectParameter("FK_Task", fK_Task) :
                new ObjectParameter("FK_Task", typeof(int));
    
            var fK_ProjectParameter = fK_Project.HasValue ?
                new ObjectParameter("FK_Project", fK_Project) :
                new ObjectParameter("FK_Project", typeof(int));
    
            var fK_MilestoneParameter = fK_Milestone.HasValue ?
                new ObjectParameter("FK_Milestone", fK_Milestone) :
                new ObjectParameter("FK_Milestone", typeof(int));
    
            var fK_MilestoneOwnerParameter = fK_MilestoneOwner.HasValue ?
                new ObjectParameter("FK_MilestoneOwner", fK_MilestoneOwner) :
                new ObjectParameter("FK_MilestoneOwner", typeof(int));
    
            var fK_ProjectOwnerParameter = fK_ProjectOwner.HasValue ?
                new ObjectParameter("FK_ProjectOwner", fK_ProjectOwner) :
                new ObjectParameter("FK_ProjectOwner", typeof(int));
    
            var fK_CuurentlyAssignToParameter = fK_CuurentlyAssignTo.HasValue ?
                new ObjectParameter("FK_CuurentlyAssignTo", fK_CuurentlyAssignTo) :
                new ObjectParameter("FK_CuurentlyAssignTo", typeof(int));
    
            var completedOnParameter = completedOn.HasValue ?
                new ObjectParameter("CompletedOn", completedOn) :
                new ObjectParameter("CompletedOn", typeof(System.DateTime));
    
            var aCreatedOnParameter = aCreatedOn.HasValue ?
                new ObjectParameter("ACreatedOn", aCreatedOn) :
                new ObjectParameter("ACreatedOn", typeof(System.DateTime));
    
            var aCreatedByParameter = aCreatedBy.HasValue ?
                new ObjectParameter("ACreatedBy", aCreatedBy) :
                new ObjectParameter("ACreatedBy", typeof(int));
    
            var aModifiedOnParameter = aModifiedOn.HasValue ?
                new ObjectParameter("AModifiedOn", aModifiedOn) :
                new ObjectParameter("AModifiedOn", typeof(System.DateTime));
    
            var aModifiedByParameter = aModifiedBy.HasValue ?
                new ObjectParameter("AModifiedBy", aModifiedBy) :
                new ObjectParameter("AModifiedBy", typeof(int));
    
            var aIsActiveParameter = aIsActive.HasValue ?
                new ObjectParameter("AIsActive", aIsActive) :
                new ObjectParameter("AIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EditActivity", idParameter, activityNameParameter, descriptionParameter, uploadAttachementParameter, longitudeParameter, latitudeParameter, fK_TaskParameter, fK_ProjectParameter, fK_MilestoneParameter, fK_MilestoneOwnerParameter, fK_ProjectOwnerParameter, fK_CuurentlyAssignToParameter, completedOnParameter, aCreatedOnParameter, aCreatedByParameter, aModifiedOnParameter, aModifiedByParameter, aIsActiveParameter, exceptionMessage, validateMessage);
        }
    
        public virtual int SP_EditMilestone(Nullable<int> id, Nullable<int> fK_Project, string milestoneName, string description, string uploadAttachement, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string status, Nullable<decimal> budget, Nullable<decimal> progress, string priority, Nullable<int> fK_DependentOn, Nullable<bool> isDependent, Nullable<int> fK_ProjectOwner, Nullable<int> fK_CuurentlyAssignTo, Nullable<System.DateTime> completedOn, Nullable<System.DateTime> mCreatedOn, Nullable<int> mCreatedBy, Nullable<System.DateTime> mModifiedOn, Nullable<int> mModifiedBy, Nullable<bool> mIsActive, ObjectParameter exceptionMessage, ObjectParameter validateMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fK_ProjectParameter = fK_Project.HasValue ?
                new ObjectParameter("FK_Project", fK_Project) :
                new ObjectParameter("FK_Project", typeof(int));
    
            var milestoneNameParameter = milestoneName != null ?
                new ObjectParameter("MilestoneName", milestoneName) :
                new ObjectParameter("MilestoneName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var uploadAttachementParameter = uploadAttachement != null ?
                new ObjectParameter("UploadAttachement", uploadAttachement) :
                new ObjectParameter("UploadAttachement", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var budgetParameter = budget.HasValue ?
                new ObjectParameter("Budget", budget) :
                new ObjectParameter("Budget", typeof(decimal));
    
            var progressParameter = progress.HasValue ?
                new ObjectParameter("Progress", progress) :
                new ObjectParameter("Progress", typeof(decimal));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var fK_DependentOnParameter = fK_DependentOn.HasValue ?
                new ObjectParameter("FK_DependentOn", fK_DependentOn) :
                new ObjectParameter("FK_DependentOn", typeof(int));
    
            var isDependentParameter = isDependent.HasValue ?
                new ObjectParameter("IsDependent", isDependent) :
                new ObjectParameter("IsDependent", typeof(bool));
    
            var fK_ProjectOwnerParameter = fK_ProjectOwner.HasValue ?
                new ObjectParameter("FK_ProjectOwner", fK_ProjectOwner) :
                new ObjectParameter("FK_ProjectOwner", typeof(int));
    
            var fK_CuurentlyAssignToParameter = fK_CuurentlyAssignTo.HasValue ?
                new ObjectParameter("FK_CuurentlyAssignTo", fK_CuurentlyAssignTo) :
                new ObjectParameter("FK_CuurentlyAssignTo", typeof(int));
    
            var completedOnParameter = completedOn.HasValue ?
                new ObjectParameter("CompletedOn", completedOn) :
                new ObjectParameter("CompletedOn", typeof(System.DateTime));
    
            var mCreatedOnParameter = mCreatedOn.HasValue ?
                new ObjectParameter("MCreatedOn", mCreatedOn) :
                new ObjectParameter("MCreatedOn", typeof(System.DateTime));
    
            var mCreatedByParameter = mCreatedBy.HasValue ?
                new ObjectParameter("MCreatedBy", mCreatedBy) :
                new ObjectParameter("MCreatedBy", typeof(int));
    
            var mModifiedOnParameter = mModifiedOn.HasValue ?
                new ObjectParameter("MModifiedOn", mModifiedOn) :
                new ObjectParameter("MModifiedOn", typeof(System.DateTime));
    
            var mModifiedByParameter = mModifiedBy.HasValue ?
                new ObjectParameter("MModifiedBy", mModifiedBy) :
                new ObjectParameter("MModifiedBy", typeof(int));
    
            var mIsActiveParameter = mIsActive.HasValue ?
                new ObjectParameter("MIsActive", mIsActive) :
                new ObjectParameter("MIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EditMilestone", idParameter, fK_ProjectParameter, milestoneNameParameter, descriptionParameter, uploadAttachementParameter, startDateParameter, endDateParameter, statusParameter, budgetParameter, progressParameter, priorityParameter, fK_DependentOnParameter, isDependentParameter, fK_ProjectOwnerParameter, fK_CuurentlyAssignToParameter, completedOnParameter, mCreatedOnParameter, mCreatedByParameter, mModifiedOnParameter, mModifiedByParameter, mIsActiveParameter, exceptionMessage, validateMessage);
        }
    
        public virtual int SP_EditTask(Nullable<int> id, Nullable<int> fK_Project, Nullable<int> fK_Milestone, string taskName, string description, string uploadAttachement, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string status, Nullable<decimal> budget, Nullable<decimal> progress, string priority, Nullable<decimal> longitude, Nullable<decimal> latitude, Nullable<decimal> radius, Nullable<int> fK_DependentOn, Nullable<bool> isDependent, Nullable<int> fK_ProjectOwner, Nullable<int> fK_CuurentlyAssignTo, Nullable<System.DateTime> completedOn, Nullable<System.DateTime> tCreatedOn, Nullable<int> tCreatedBy, Nullable<System.DateTime> tModifiedOn, Nullable<int> tModifiedBy, Nullable<bool> tIsActive, ObjectParameter exceptionMessage, ObjectParameter validateMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fK_ProjectParameter = fK_Project.HasValue ?
                new ObjectParameter("FK_Project", fK_Project) :
                new ObjectParameter("FK_Project", typeof(int));
    
            var fK_MilestoneParameter = fK_Milestone.HasValue ?
                new ObjectParameter("FK_Milestone", fK_Milestone) :
                new ObjectParameter("FK_Milestone", typeof(int));
    
            var taskNameParameter = taskName != null ?
                new ObjectParameter("TaskName", taskName) :
                new ObjectParameter("TaskName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var uploadAttachementParameter = uploadAttachement != null ?
                new ObjectParameter("UploadAttachement", uploadAttachement) :
                new ObjectParameter("UploadAttachement", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var budgetParameter = budget.HasValue ?
                new ObjectParameter("Budget", budget) :
                new ObjectParameter("Budget", typeof(decimal));
    
            var progressParameter = progress.HasValue ?
                new ObjectParameter("Progress", progress) :
                new ObjectParameter("Progress", typeof(decimal));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var radiusParameter = radius.HasValue ?
                new ObjectParameter("Radius", radius) :
                new ObjectParameter("Radius", typeof(decimal));
    
            var fK_DependentOnParameter = fK_DependentOn.HasValue ?
                new ObjectParameter("FK_DependentOn", fK_DependentOn) :
                new ObjectParameter("FK_DependentOn", typeof(int));
    
            var isDependentParameter = isDependent.HasValue ?
                new ObjectParameter("IsDependent", isDependent) :
                new ObjectParameter("IsDependent", typeof(bool));
    
            var fK_ProjectOwnerParameter = fK_ProjectOwner.HasValue ?
                new ObjectParameter("FK_ProjectOwner", fK_ProjectOwner) :
                new ObjectParameter("FK_ProjectOwner", typeof(int));
    
            var fK_CuurentlyAssignToParameter = fK_CuurentlyAssignTo.HasValue ?
                new ObjectParameter("FK_CuurentlyAssignTo", fK_CuurentlyAssignTo) :
                new ObjectParameter("FK_CuurentlyAssignTo", typeof(int));
    
            var completedOnParameter = completedOn.HasValue ?
                new ObjectParameter("CompletedOn", completedOn) :
                new ObjectParameter("CompletedOn", typeof(System.DateTime));
    
            var tCreatedOnParameter = tCreatedOn.HasValue ?
                new ObjectParameter("TCreatedOn", tCreatedOn) :
                new ObjectParameter("TCreatedOn", typeof(System.DateTime));
    
            var tCreatedByParameter = tCreatedBy.HasValue ?
                new ObjectParameter("TCreatedBy", tCreatedBy) :
                new ObjectParameter("TCreatedBy", typeof(int));
    
            var tModifiedOnParameter = tModifiedOn.HasValue ?
                new ObjectParameter("TModifiedOn", tModifiedOn) :
                new ObjectParameter("TModifiedOn", typeof(System.DateTime));
    
            var tModifiedByParameter = tModifiedBy.HasValue ?
                new ObjectParameter("TModifiedBy", tModifiedBy) :
                new ObjectParameter("TModifiedBy", typeof(int));
    
            var tIsActiveParameter = tIsActive.HasValue ?
                new ObjectParameter("TIsActive", tIsActive) :
                new ObjectParameter("TIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EditTask", idParameter, fK_ProjectParameter, fK_MilestoneParameter, taskNameParameter, descriptionParameter, uploadAttachementParameter, startDateParameter, endDateParameter, statusParameter, budgetParameter, progressParameter, priorityParameter, longitudeParameter, latitudeParameter, radiusParameter, fK_DependentOnParameter, isDependentParameter, fK_ProjectOwnerParameter, fK_CuurentlyAssignToParameter, completedOnParameter, tCreatedOnParameter, tCreatedByParameter, tModifiedOnParameter, tModifiedByParameter, tIsActiveParameter, exceptionMessage, validateMessage);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int AddProjectMember(string name, Nullable<int> fK_Project, Nullable<int> fK_Employee365ID, Nullable<System.DateTime> createdOn, Nullable<int> pCreatedBy, Nullable<System.DateTime> pModifiedOn, Nullable<int> pModifiedBy, Nullable<bool> pIsActive, ObjectParameter exceptionMessage, ObjectParameter validateMessage)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var fK_ProjectParameter = fK_Project.HasValue ?
                new ObjectParameter("FK_Project", fK_Project) :
                new ObjectParameter("FK_Project", typeof(int));
    
            var fK_Employee365IDParameter = fK_Employee365ID.HasValue ?
                new ObjectParameter("FK_Employee365ID", fK_Employee365ID) :
                new ObjectParameter("FK_Employee365ID", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var pCreatedByParameter = pCreatedBy.HasValue ?
                new ObjectParameter("PCreatedBy", pCreatedBy) :
                new ObjectParameter("PCreatedBy", typeof(int));
    
            var pModifiedOnParameter = pModifiedOn.HasValue ?
                new ObjectParameter("PModifiedOn", pModifiedOn) :
                new ObjectParameter("PModifiedOn", typeof(System.DateTime));
    
            var pModifiedByParameter = pModifiedBy.HasValue ?
                new ObjectParameter("PModifiedBy", pModifiedBy) :
                new ObjectParameter("PModifiedBy", typeof(int));
    
            var pIsActiveParameter = pIsActive.HasValue ?
                new ObjectParameter("PIsActive", pIsActive) :
                new ObjectParameter("PIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProjectMember", nameParameter, fK_ProjectParameter, fK_Employee365IDParameter, createdOnParameter, pCreatedByParameter, pModifiedOnParameter, pModifiedByParameter, pIsActiveParameter, exceptionMessage, validateMessage);
        }
    
        public virtual int AddAttachment(string name, string path, string extention, Nullable<int> proId, Nullable<System.DateTime> createdOn, Nullable<int> pCreatedBy, Nullable<System.DateTime> pModifiedOn, Nullable<int> pModifiedBy, Nullable<bool> pIsActive, ObjectParameter exceptionMessage, ObjectParameter validateMessage)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var extentionParameter = extention != null ?
                new ObjectParameter("extention", extention) :
                new ObjectParameter("extention", typeof(string));
    
            var proIdParameter = proId.HasValue ?
                new ObjectParameter("ProId", proId) :
                new ObjectParameter("ProId", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var pCreatedByParameter = pCreatedBy.HasValue ?
                new ObjectParameter("PCreatedBy", pCreatedBy) :
                new ObjectParameter("PCreatedBy", typeof(int));
    
            var pModifiedOnParameter = pModifiedOn.HasValue ?
                new ObjectParameter("PModifiedOn", pModifiedOn) :
                new ObjectParameter("PModifiedOn", typeof(System.DateTime));
    
            var pModifiedByParameter = pModifiedBy.HasValue ?
                new ObjectParameter("PModifiedBy", pModifiedBy) :
                new ObjectParameter("PModifiedBy", typeof(int));
    
            var pIsActiveParameter = pIsActive.HasValue ?
                new ObjectParameter("PIsActive", pIsActive) :
                new ObjectParameter("PIsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAttachment", nameParameter, pathParameter, extentionParameter, proIdParameter, createdOnParameter, pCreatedByParameter, pModifiedOnParameter, pModifiedByParameter, pIsActiveParameter, exceptionMessage, validateMessage);
        }
    }
}
